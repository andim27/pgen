"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const child_process_1 = require("child_process");
const net_1 = require("net");
const node_fetch_1 = require("node-fetch");
const path_1 = require("path");
/**
 * Removes comments and whitespace from a PHP script, by calling a Web service.
 */
class FastTransformer {
    /**
     * Creates a new fast transformer.
     * @param _executable The path to the PHP executable.
     */
    constructor(_executable = 'php') {
        this._executable = _executable;
        /**
         * The port that the PHP process is listening on.
         */
        this._port = -1;
        /**
         * The underlying PHP process.
         */
        this._process = null;
    }
    /**
     * The class name.
     */
    get [Symbol.toStringTag]() {
        return 'FastTransformer';
    }
    /**
     * Value indicating whether the PHP process is currently listening.
     */
    get listening() {
        return this._process != null;
    }
    /**
     * Closes this transformer and releases any resources associated with it.
     * @return Completes when the transformer is finally disposed.
     */
    async close() {
        if (!this.listening)
            return;
        this._process.kill();
        this._process = null;
    }
    /**
     * Starts the underlying PHP process: begins accepting connections. It does nothing if the server is already started.
     * @return The port used by the PHP process.
     */
    async listen() {
        if (this.listening)
            return this._port;
        this._port = await this._getPort();
        // tslint:disable-next-line: no-shadowed-variable
        return new Promise((resolve, reject) => {
            this._process = child_process_1.spawn(this._executable, ['-S', `${FastTransformer.defaultAddress}:${this._port}`, '-t', path_1.join(__dirname, 'php')]);
            this._process.on('error', err => reject(err));
            setTimeout(() => resolve(this._port), 1000);
        });
    }
    /**
     * Processes a PHP script.
     * @param script The path to the PHP script.
     * @return The transformed script.
     */
    async transform(script) {
        const port = await this.listen();
        const endPoint = new URL(`http://${FastTransformer.defaultAddress}:${port}/server.php`);
        endPoint.searchParams.set('file', path_1.resolve(script));
        const res = await node_fetch_1.default(endPoint.href);
        if (!res.ok)
            throw new Error('An error occurred while transforming the script.');
        return res.text();
    }
    /**
     * Gets an ephemeral port chosen by the system.
     * @return A port that the server can listen on.
     */
    _getPort() {
        // tslint:disable-next-line: no-shadowed-variable
        return new Promise((resolve, reject) => {
            const server = net_1.createServer().unref();
            server.on('error', err => reject(err));
            server.listen(0, FastTransformer.defaultAddress, () => {
                const port = server.address().port;
                server.close(() => resolve(port));
            });
        });
    }
}
/**
 * The default address that the server is listening on.
 */
FastTransformer.defaultAddress = '127.0.0.1';
exports.FastTransformer = FastTransformer;
//# sourceMappingURL=fast_transformer.js.map