"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const which_1 = require("@cedx/which");
const stream_1 = require("stream");
// @ts-ignore: disable processing of the imported JSON file.
const pkg = require("../package.json");
const fast_transformer_1 = require("./fast_transformer");
const safe_transformer_1 = require("./safe_transformer");
const transform_mode_1 = require("./transform_mode");
/**
 * Removes PHP comments and whitespace by applying the `php_strip_whitespace()` function.
 */
class Minifier extends stream_1.Transform {
    /**
     * Creates a new minifier.
     * @param options An object specifying values used to initialize this instance.
     */
    constructor(options = {}) {
        super({ objectMode: true });
        const { binary = '', mode = transform_mode_1.TransformMode.safe, silent = false } = options;
        this.silent = silent;
        this._transformer = `${mode}:${binary}`;
        const handler = async () => { if (typeof this._transformer != 'string')
            await this._transformer.close(); };
        this.on('end', handler).on('error', handler);
    }
    /**
     * The class name.
     */
    get [Symbol.toStringTag]() {
        return 'Minifier';
    }
    /**
     * Transforms input and produces output.
     * @param file The chunk to transform.
     * @param encoding The encoding type if the chunk is a string.
     * @param callback The function to invoke when the supplied chunk has been processed.
     * @return The transformed chunk.
     */
    async _transform(file, encoding = 'utf8', callback) {
        try {
            if (typeof this._transformer == 'string') {
                // tslint:disable-next-line: prefer-const
                let [mode, executable] = this._transformer.split(':', 2);
                if (!executable.length)
                    executable = await which_1.which('php');
                this._transformer = mode == transform_mode_1.TransformMode.fast ? new fast_transformer_1.FastTransformer(executable) : new safe_transformer_1.SafeTransformer(executable);
            }
            // tslint:disable-next-line: no-console
            if (!this.silent)
                console.log(`Minifying: ${file.path}`);
            file.contents = Buffer.from(await this._transformer.transform(file.path), encoding);
            if (callback)
                callback(undefined, file);
        }
        catch (err) {
            if (callback)
                callback(new Error(`[${pkg.name}] ${err.message}`));
            else
                throw err;
        }
        return file;
    }
}
exports.Minifier = Minifier;
//# sourceMappingURL=minifier.js.map