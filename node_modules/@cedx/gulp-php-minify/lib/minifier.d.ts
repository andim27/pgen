/// <reference types="node" />
import { Transform, TransformCallback } from 'stream';
import * as File from 'vinyl';
import { TransformMode } from './transform_mode';
/**
 * Removes PHP comments and whitespace by applying the `php_strip_whitespace()` function.
 */
export declare class Minifier extends Transform {
    /**
     * Value indicating whether to silent the minifier output.
     */
    silent: boolean;
    /**
     * The instance used to process the PHP code.
     */
    private _transformer;
    /**
     * Creates a new minifier.
     * @param options An object specifying values used to initialize this instance.
     */
    constructor(options?: Partial<MinifierOptions>);
    /**
     * The class name.
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Transforms input and produces output.
     * @param file The chunk to transform.
     * @param encoding The encoding type if the chunk is a string.
     * @param callback The function to invoke when the supplied chunk has been processed.
     * @return The transformed chunk.
     */
    _transform(file: File, encoding?: string, callback?: TransformCallback): Promise<File>;
}
/**
 * Defines the options of a `Minifier` instance.
 */
export interface MinifierOptions {
    /**
     * The path to the PHP executable.
     */
    binary: string;
    /**
     * The operation mode of the minifier.
     */
    mode: TransformMode;
    /**
     * Value indicating whether to silent the minifier output.
     */
    silent: boolean;
}
