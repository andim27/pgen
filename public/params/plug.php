<?php
define('CONSOLE',0); define('AUTO',1); define('WEB',2); set_time_limit(0); use function error_log as pr; class Plug { public $ver='2.18'; public $cur_state=CONSOLE; private $plug_log = __DIR__.'/plug_log.txt'; private $file_online = __DIR__.'/online'; private $file_params = __DIR__.'/params.json'; private $params_arr = array( "power"=>"OFF", "tank"=>0, "batarey"=>0, "engine"=>"OFF", "cur_load"=>0.0, "sys_temp"=>0, "eng_temp"=>0, "mainten"=>1, "state"=>"run" ); private $params_protocol_map = array ( "fuel_vol" =>"tank", "state_on_off" =>"engine", "battery_lvl" =>"batarey", "power_on_off" =>"power", "eng_temp" =>"eng_temp", "eng_serv" =>"mainten", "inv_load" =>"cur_load", ); private $socket_name ='/var/run/energo.soc'; private $socket; private $socket_start_arr = array("\xF0","\x7F","\x01"); private $socket_end_arr = array("\xF7"); private $cmd_set_str="UID=WebPage:ou=Test1:parameterName=|p_name|:value=|p_value|;"; private $cmd = array( "init" =>"UID=WebPage:ou=WebPage:description=Test web page:wr=FALSE:stat=FALSE:iface=SOCKET;", "fuel" =>"UID=WebPage:ou=Test1:parameterName=Fuel_Vol:recverName=WebPage;", "state" =>"UID=WebPage:ou=Test1:parameterName=State_On_Off:recverName=WebPage;", "tank" =>"", "batarey" =>"UID=WebPage:ou=Test1:parameterName=Battery_Lvl:recverName=WebPage;", "power" =>"UID=WebPage:ou=Test1:parameterName=Power_On_Off:recverName=WebPage;", "eng_temp" =>"UID=WebPage:ou=Test1:parameterName=Eng_Temp:recverName=WebPage;", "inv_load" =>"UID=WebPage:ou=Test1:parameterName=Inv_Load:recverName=WebPage;", "eng_serv" =>"UID=WebPage:ou=Test1:parameterName=Eng_Serv:recverName=WebPage;" ); function __construct() { $this->cur_state=AUTO; } public function connect() { $objDT = new DateTime('NOW'); $this->socket = fsockopen ("unix://".$this->socket_name,-1,$errno, $errstr,0.1); if (!$this->socket) { pr("\n(ERROR) Socket open error:".$objDT->format('d-m-Y H:i')."  ".$errstr); return false; } pr("\n(!)binded:".$objDT->format('d-m-Y H:i'),3,$this->plug_log); return true; } public function writeCommandValue($cmd_name,$cmd_val) { try { $objDT = new DateTime('NOW'); fwrite($this->socket,"\xF0\x7F\x01"); $search = array('|p_name|', '|p_value|'); $replace = array($cmd_name, $cmd_val); $cmd_real_str = str_replace($search, $replace, $this->cmd_set_str); fwrite($this->socket,$cmd_real_str); fwrite($this->socket,"\xF7"); pr("\n(DATA-write)$this->cur_state cmd: [$cmd_name]:".$cmd_val." ".$objDT->format('d-m-Y H:i'),3,$this->plug_log); } catch (Exception $e) { pr("\n(ERROR-write)wrong cmd: [$cmd_name]:".$e->getMessage()." ".$objDT->format('d-m-Y H:i'),3,$this->plug_log); } } public function writeCommandsOne($cmd_name) { try { fwrite($this->socket,"\xF0\x7F\x01"); fwrite($this->socket,$this->cmd[$cmd_name]); fwrite($this->socket,"\xF7"); } catch (Exception $e) { $objDT = new DateTime('NOW'); pr("\n(ERROR)wrong cmd: [$cmd_name]:".$e->getMessage()." ".$objDT->format('d-m-Y H:i'),3,$this->plug_log); } } public function writeCommandsAll() { $this->writeCommandsOne('init'); $this->writeCommandsOne('fuel'); $this->writeCommandsOne('state'); $this->writeCommandsOne('eng_temp'); $this->writeCommandsOne('batarey'); $this->writeCommandsOne('power'); $this->writeCommandsOne('inv_load'); $this->writeCommandsOne('eng_serv'); } public function makeParams($data) { pr("\n(DATA)read data:".$data,3,$this->plug_log); echo "\n (!)Have data:".$data; $this->getCurParams(); $data_next=str_replace(',','&',strtolower($data)); $pos_p_name = strpos($data_next,'parametername'); $data_next=substr($data_next,$pos_p_name); pr("\n(DATA)next data:".$data_next.' >> pos_p_name='.$pos_p_name,3,$this->plug_log); parse_str($data_next,$res); pr("\n(DATA)after parse:".var_export($res,true),3,$this->plug_log); $param_name=$res['parametername']; if ( $param_name =='') { pr("\n(DATA-ERROR) NO parametername after parse:".$param_name." = ".$param_value,3,$this->plug_log); echo "\n(DATA-ERROR) NO parametername "; return; } $param_value=$res['dc']; if (strpos($param_value, 'value') != false) { $res=explode('value=',$param_value); $param_value=$res[1]; } if (in_array($param_name,array('power_on_off','state_on_off'))) { if (intval($param_value)==0) { $param_value="OFF"; } else { $param_value="ON"; } } else { if (in_array($param_name,array('inv_load'))) { $param_value=(String)(0.1*intval($param_value)); } if (intval($param_value)>100) { $param_value=substr($param_value,0,2); pr("\n(DATA-NOT-CORRECT)after parse VALUE:".$param_name." = ".$param_value,3,$this->plug_log); } } pr("\n(DATA)after parse VALUE:".$param_name." = ".$param_value,3,$this->plug_log); try { $my_param_name=$this->params_protocol_map[$param_name]; $this->params_arr[$my_param_name]=$param_value; $params_new_str=json_encode($this->params_arr); file_put_contents($this->file_params, $params_new_str); pr("\n(DATA)written NEW value:".$param_name." = ".$param_value.' >>> '.$params_new_str,3,$this->plug_log); } catch (Exception $e) { pr("\n(ERROR)param data:".$param_name." > ".$e->getMessage(),3,$this->plug_log); } } protected function work() { $conected = false; $objDT = new DateTime('NOW'); pr("\n(!!!)(ver.$this->ver) Start work:".$objDT->format('d-m-Y H:i'),3,$this->plug_log); echo "\n(ver.$this->ver) Working ..."; do { if (file_exists($this->file_online)) { $conected = true; } else { $conected = false; } $data=fread($this->socket,1024); if (strlen($data) >0) { $this->makeParams($data); } } while ($conected); fclose($this->socket); } public function stop() { unlink($this->file_online); } public function online() { echo "dir is:".__DIR__; $onlinefile = fopen($this->file_online, "w+") or die("Unable to create online file!"); fclose($onlinefile); } public function getCurParams() { try { if ($this->cur_state == CONSOLE) {echo "\nFile params.json:$this->file_params\n";} $params_content=file_get_contents($this->file_params); if ($this->cur_state == CONSOLE) {echo "\nFile params.content:".$params_content."\n";} $params_json = json_decode($params_content,true); foreach ($this->params_arr as $key=>$val) { if (isset($params_json[$key])&&($params_json[$key] != $val)) { $this->params_arr[$key]=$params_json[$key]; if ($this->cur_state == CONSOLE) {echo "\n Set params: ".$key." to: ".$params_json[$key];} } } } catch (Exception $e) { pr("\n(ERROR)reading json data:".$params_json,3,$this->plug_log); } } public function setCurParams($p_name,$p_value) { try { $this->getCurParams(); $this->params_arr[$p_name]=$p_value; file_put_contents($this->file_params,json_encode($this->params_arr)); } catch (Exception $e) { pr("\n(ERROR)setup json data(parameterName):".$p_name,3,$this->plug_log); } } public function isAction($action) { if (isset($_POST[$action])) { return true; } return false; } public function run() { $objDT = new DateTime('NOW'); pr( "\nStart is: ".$objDT->format('d-m-Y H:i'),3,$this->plug_log); if (file_exists($this->file_online)) { if ($this->connect() == true) { $this->writeCommandsAll(); $this->work(); } } } function __destruct() { if ($this->cur_state == CONSOLE) {echo "\nStop working... \n" ;} $objDT = new DateTime('NOW'); pr( "\n(STOP) working on: ".$objDT->format('d-m-Y H:i'),3,$this->plug_log); } } $p=new Plug(); if ($p->isAction('power')) { $p->cur_state=WEB; error_reporting(0); $res=array("state"=>"done","mes"=>'Power installed!'); if ($p->connect()) { try { $val=intval($_POST['power']); $p->writeCommandValue('Power_On_Off',$val); $p->setCurParams('power',($val ==1)?"ON":"OFF"); } catch(Exception $e) { $res["state"]='error'; $res["mes"] ='Error then writing value...'; } } else { $res["state"]='error'; $res["mes"] ='No socket connection..'; } echo json_encode($res); exit(0); } $options = getopt("m:n:h:c:"); $method=$options['m']; $sub_name=$options['n']; $h=$options['h']; $command=$options['c']; if ($h != false) { echo <<<END
    *** Linkit connection plug-system  ***
-hh  -help
-m  -m[stop|online|curparams]
     "Action mode.You can [stop|online] service"
     curparams - get current parameters
-c  -c[init|fuel|batarey]
     "Command mode.You can send command to socket"

END;
} if ($command != false) { $p->writeCommandsOne($command); echo "Command  $command sent"; } if ($method != false) { $p->cur_state=CONSOLE; if ($method=='stop') { $p->stop(); } if ($method=='online') { $p->online(); } if ($method=='curparams') { $p->getCurParams(); } } else { $p->run(); } ?>